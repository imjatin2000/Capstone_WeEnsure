# Databricks notebook source
from pyspark.sql.functions import *
from pyspark.sql.types import *
import dlt

# COMMAND ----------

agents_df = spark.read.format("delta").table("weensure.capstone.agents_clean")
claims_df = spark.read.format("delta").table("weensure.capstone.claims_clean")
customers_df = spark.read.format("delta").table("weensure.capstone.customers_clean")
payments_df = spark.read.format("delta").table("weensure.capstone.payments_clean")
plans_df = spark.read.format("delta").table("weensure.capstone.plans_clean")
policies_df = spark.read.format("delta").table("weensure.capstone.policies_clean")
provider_df = spark.read.format("delta").table("weensure.capstone.provider_clean")
reimbursements_df = spark.read.format("delta").table("weensure.capstone.reimbursement_clean")
rejected_claims_df = spark.read.format("delta").table("weensure.capstone.rejected_claims_clean")
subscribers_df = spark.read.format("delta").table("weensure.capstone.subscribers_clean")

# COMMAND ----------

agents_df.createOrReplaceTempView("agents_clean")
claims_df.createOrReplaceTempView("claims_clean")
customers_df.createOrReplaceTempView("customers_clean")
payments_df.createOrReplaceTempView("payments_clean")
plans_df.createOrReplaceTempView("plans_clean")
policies_df.createOrReplaceTempView("policies_clean")
provider_df.createOrReplaceTempView("provider_clean")
reimbursements_df.createOrReplaceTempView("reimbursement_clean")
rejected_claims_df.createOrReplaceTempView("rejected_claims_clean")
subscribers_df.createOrReplaceTempView("subscribers_clean")

# COMMAND ----------

display(subscribers_df)

# COMMAND ----------

# MAGIC %md
# MAGIC #AGENTS

# COMMAND ----------

# MAGIC %md
# MAGIC ####Claims by Agent 

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET COMBOBOX agent_id DEFAULT "AGENT_0009" CHOICES SELECT DISTINCT agent_id FROM agents_clean;

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT a.name,a.agent_id,
# MAGIC        COUNT(c.claim_number) AS claim_count,
# MAGIC        SUM(c.amount_claimed) AS total_claim_amount
# MAGIC FROM agents_clean a
# MAGIC JOIN customers_clean cu ON a.agent_id = cu.agent_id
# MAGIC JOIN policies_clean p ON p.customer_id = cu.customer_id
# MAGIC JOIN claims_clean c ON p.policy_number = c.policy_number
# MAGIC WHERE a.agent_id = "$agent_id"
# MAGIC GROUP BY 1,2;

# COMMAND ----------

# MAGIC %md
# MAGIC ###The total premium generated by the agent

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT a.agent_id, a.name AS agent_name, SUM(p.daily_premium) AS total_premium_generated
# MAGIC FROM agents_clean a
# MAGIC LEFT JOIN customers_clean c ON a.agent_id = c.agent_id
# MAGIC LEFT JOIN policies_clean p ON c.customer_id = p.customer_id
# MAGIC GROUP BY a.agent_id, a.name
# MAGIC ORDER BY total_premium_generated $sort_order

# COMMAND ----------

# MAGIC %md
# MAGIC ###The total premium generated by selecting particular agent 
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT a.agent_id, a.name AS agent_name, SUM(p.daily_premium) AS total_premium_generated
# MAGIC FROM agents_clean a
# MAGIC LEFT JOIN customers_clean c ON a.agent_id = c.agent_id
# MAGIC LEFT JOIN policies_clean p ON c.customer_id = p.customer_id
# MAGIC where  a.agent_id = "$agent_id"
# MAGIC GROUP BY a.agent_id, a.name
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ###Agents working with Max customers

# COMMAND ----------

joined_data = agents_df.join(customers_df,'agent_id')

#Grouping data and counting the number of customer the agents have worked with
customers_agents = joined_data.groupBy(["agent_id",'name']).count().orderBy(desc("count"))
display(customers_agents)

#Finding the name of the agents with max and min number of customers
best_agent = customers_agents.select("name").orderBy(col("count").desc()).limit(1)
worst_agent = customers_agents.select("name").orderBy(col("count"))

best_agent_value = best_agent.first()["name"]
worst_agent_value = worst_agent.first()['name']

#showing the result
print(f"The agent who worked with most customers: {best_agent_value}")
print(f"The agent who worked with least customers: {worst_agent_value}")

# COMMAND ----------

# MAGIC %md
# MAGIC #PLANS

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET TEXT rounding_precision DEFAULT "2";
# MAGIC
# MAGIC
# MAGIC CREATE WIDGET DROPDOWN sort_order DEFAULT "ASC" CHOICES SELECT * FROM (VALUES ("ASC"), ("DESC"));

# COMMAND ----------

# MAGIC %md
# MAGIC ###Average daily premium and insurance coverage for each plan

# COMMAND ----------

# %sql
# SELECT policies_clean.plan_id,
#     ROUND(AVG(plans_clean.daily_premium), $rounding_precision) AS avg_premium,
#     ROUND(AVG(insurance_coverage), $rounding_precision) AS avg_insurance_coverage
# FROM policies_clean
# JOIN plans_clean ON policies_clean.plan_id =plans_clean.plan_id
# GROUP BY 1
# ORDER BY avg_premium $sort_order

# COMMAND ----------

# MAGIC %md
# MAGIC ###Number of subscribers for each Plan

# COMMAND ----------

joined_data = (
    plans_df
    .join(policies_df, "plan_id", "inner")
    .join(customers_df, "customer_id", "inner")
    .join(subscribers_df, "sub_id", "inner")
)

#Grouping data and counting the number of subscribers in the plans
result = (
    joined_data
    .groupBy("plan_id")
    .agg(countDistinct("sub_id").alias("subscriber_count"))
    .orderBy("subscriber_count", ascending=False)
)

display(result)

# COMMAND ----------

# MAGIC %md
# MAGIC ###plan_id details
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET COMBOBOX plan_id DEFAULT "PLAN-0008" CHOICES SELECT DISTINCT plan_id FROM plans_clean;
# MAGIC
# MAGIC -- Your SQL query for plan comparison here
# MAGIC SELECT *
# MAGIC FROM plans_clean
# MAGIC WHERE plan_id = "$plan_id";
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ### average policy duration by plan_id

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT Pl.plan_id, round(AVG(DATEDIFF(P.policy_end_date, P.policy_start_date)),2) AS avg_policy_duration_new
# MAGIC FROM Policies_clean P
# MAGIC LEFT JOIN Plans_clean Pl ON P.plan_id = Pl.plan_id
# MAGIC GROUP BY Pl.plan_id;

# COMMAND ----------

# MAGIC %md
# MAGIC ### average policy duration by selecting particular plan_id

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT Pl.plan_id, round(AVG(DATEDIFF(P.policy_end_date, P.policy_start_date)),2) AS avg_policy_duration_new
# MAGIC FROM Policies_clean P
# MAGIC LEFT JOIN Plans_clean Pl ON P.plan_id = Pl.plan_id
# MAGIC where Pl.plan_id="$plan_id"
# MAGIC GROUP BY Pl.plan_id;

# COMMAND ----------

# MAGIC %md
# MAGIC ###PAYMENTS

# COMMAND ----------

# MAGIC %md
# MAGIC ####Total Payments across all Policies

# COMMAND ----------

total_payments = payments_df.select(sum("paid_amount")).collect()[0][0]
display(total_payments)

# Print the total payments
print("Total Payments Across All Policies: {:.2f}".format(total_payments))

# COMMAND ----------

display(payments_df)

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET COMBOBOX policy_number DEFAULT "Policy-00033" CHOICES SELECT  policy_number FROM policies_clean Limit 1023;

# COMMAND ----------

# MAGIC %md
# MAGIC ###Payment History by selecting particular policy_number

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT transaction_date, paid_amount
# MAGIC FROM payments_clean
# MAGIC WHERE policy_number = "$policy_number"
# MAGIC ORDER BY transaction_date;

# COMMAND ----------

# MAGIC %md
# MAGIC #CUSTOMERS

# COMMAND ----------

# MAGIC %md
# MAGIC ###customers' total payment contributions

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT c.customer_id, c.customer_name, SUM(pa.paid_amount) AS total_payments
# MAGIC FROM customers_clean c
# MAGIC JOIN policies_clean p ON c.customer_id = p.customer_id
# MAGIC JOIN payments_clean pa ON p.policy_number = pa.policy_number
# MAGIC GROUP BY c.customer_id, c.customer_name
# MAGIC ORDER BY total_payments $sorted_order;
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ###  total payment contributions by particular customer
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET COMBOBOX customer_id DEFAULT "CUST_0005" CHOICES SELECT DISTINCT customer_id FROM Customers_clean LIMIT 1023;
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT c.customer_id, c.customer_name, SUM(pa.paid_amount) AS total_payments
# MAGIC FROM customers_clean c
# MAGIC JOIN policies_clean p ON c.customer_id = p.customer_id
# MAGIC JOIN payments_clean pa ON p.policy_number = pa.policy_number
# MAGIC where c.customer_id = "$customer_id"
# MAGIC GROUP BY c.customer_id, c.customer_name;
# MAGIC
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ###Number of customers who has opted for least premium policy amount

# COMMAND ----------

joined_data = (
    policies_df
    .join(plans_df, "plan_id", "inner")
    .join(customers_df, "customer_id", "inner")
)

# Find the minimum premium amount
min_premium = joined_data.select(min("plans_clean.daily_premium")).first()[0]

# Filter customers with the least premium policy
customers_with_least_premium = (
    joined_data
    .filter(joined_data["plans_clean.daily_premium"] == min_premium)
    .select("customer_id")
    .distinct()
)

# Count the number of customers with the least premium policy
num_customers_with_least_premium = customers_with_least_premium.count()

# Show the result
print(f"Number of customers with the least premium policy: {num_customers_with_least_premium}")

# COMMAND ----------

display(customers_df)

# COMMAND ----------

# MAGIC %md
# MAGIC ###Identify customer's preferred healthcare providers based on visit frequency.

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT p.provider_id, p.provider_name, COUNT(*) AS num_visits
# MAGIC FROM customers_clean c
# MAGIC JOIN agents_clean a ON a.agent_id = c.agent_id
# MAGIC JOIN policies_clean pol ON pol.customer_id = c.customer_id
# MAGIC JOIN claims_clean cl ON pol.policy_number = cl.policy_number
# MAGIC JOIN provider_clean p ON cl.provider_id = p.provider_id
# MAGIC WHERE c.customer_id = "$customer_id" -- Replace with the desired customer_id
# MAGIC GROUP BY p.provider_id, p.provider_name
# MAGIC ORDER BY num_visits DESC;
# MAGIC
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC #PROVIDERS

# COMMAND ----------

# MAGIC %md
# MAGIC ### Top 5 providers

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT p.provider_name, COUNT(DISTINCT po.policy_number) AS policies_sold
# MAGIC FROM provider_clean p
# MAGIC LEFT JOIN claims_clean c ON p.provider_id = c.provider_id
# MAGIC LEFT JOIN policies_clean po ON c.policy_number = po.policy_number
# MAGIC GROUP BY p.provider_name
# MAGIC ORDER BY policies_sold $sort_type
# MAGIC LIMIT 5
# MAGIC

# COMMAND ----------

display(provider_df)

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET COMBOBOX provider_id DEFAULT "Provider_00059" CHOICES SELECT DISTINCT provider_id FROM provider_clean;

# COMMAND ----------

# MAGIC %md
# MAGIC ###claims and payments information for the selected provider

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT p.provider_id, p.provider_name, 
# MAGIC        COUNT(DISTINCT c.claim_number) AS total_claims,
# MAGIC        COUNT(DISTINCT CASE WHEN pa.payment_id IS NOT NULL THEN c.claim_number END) AS claims_with_payments,
# MAGIC        COUNT(DISTINCT CASE WHEN pa.payment_id IS NULL THEN c.claim_number END) AS claims_without_payments
# MAGIC FROM provider_clean p
# MAGIC LEFT JOIN claims_clean c ON p.provider_id = c.provider_id
# MAGIC LEFT JOIN payments_clean pa ON c.claim_number = pa.policy_number
# MAGIC WHERE p.provider_id ="$provider_id" 
# MAGIC GROUP BY p.provider_id, p.provider_name
# MAGIC ORDER BY total_claims $sortt_order;
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC #REIMBURSEMENTS

# COMMAND ----------

display(reimbursements_df)

# COMMAND ----------

# MAGIC %md
# MAGIC ### Top 10 Customer who got the highest reimbursement amount

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT cu.customer_id, cu.customer_name, round(SUM(r.amount_approved),2) AS total_reimbursement_amount
# MAGIC FROM customers_clean cu
# MAGIC JOIN Policies_clean po ON cu.customer_id = po.customer_id
# MAGIC JOIN claims_clean c ON po.policy_number = c.policy_number
# MAGIC JOIN Reimbursement_clean r ON c.claim_number = r.claim_number
# MAGIC GROUP BY cu.customer_id, cu.customer_name
# MAGIC ORDER BY total_reimbursement_amount $sort_order;

# COMMAND ----------

# MAGIC %md
# MAGIC ###  The highest reimbursement amount given to specific customer

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT cu.customer_id, cu.customer_name, round(SUM(r.amount_approved),2) AS total_reimbursement_amount
# MAGIC FROM customers_clean cu
# MAGIC JOIN Policies_clean po ON cu.customer_id = po.customer_id
# MAGIC JOIN claims_clean c ON po.policy_number = c.policy_number
# MAGIC JOIN Reimbursement_clean r ON c.claim_number = r.claim_number
# MAGIC where cu.customer_id="$customer_id"
# MAGIC GROUP BY cu.customer_id, cu.customer_name
# MAGIC ;

# COMMAND ----------

# MAGIC %md
# MAGIC ####Overall Average Reimbursed amount

# COMMAND ----------

average_reimbursed_amount = reimbursements_df.agg(avg("amount_approved").alias("average_reimbursed_amount")).collect()[0]["average_reimbursed_amount"]

# Show the result
print(f"Average Reimbursed Amount: Rs.{average_reimbursed_amount:.2f}")

# COMMAND ----------

# MAGIC %md
# MAGIC ###claim approved by treatments

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT c.treatment, count(c.treatment) AS claims_approved
# MAGIC FROM Reimbursement_clean r
# MAGIC join claims_clean c on c.claim_number= r.claim_number
# MAGIC group by c.treatment

# COMMAND ----------

dbutils.widgets.dropdown("selected_treatment", "Inpatient_Care", [
    "Inpatient_Care",
    "Prescription_Drugs",
    "Vision_Care",
    "Outpatient_Care",
    "Mental_Health_Care",
    "Dental_Care"
], "Select Treatment")

# COMMAND ----------

# MAGIC %md
# MAGIC ###claims approved by selected particular treatment

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT c.treatment, COUNT(c.treatment) AS claims_approved
# MAGIC FROM Reimbursement_clean r
# MAGIC JOIN claims_clean c ON c.claim_number = r.claim_number
# MAGIC WHERE c.treatment = '${selected_treatment}'
# MAGIC GROUP BY c.treatment

# COMMAND ----------

# MAGIC %md
# MAGIC #subscribers

# COMMAND ----------

# MAGIC %md
# MAGIC ###Subscriber Types Analysis 

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET DROPDOWN sub_type DEFAULT "Family" CHOICES SELECT DISTINCT sub_type FROM subscribers_clean;
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT COUNT(*) AS count
# MAGIC FROM subscribers_clean
# MAGIC WHERE sub_type = "$sub_type";

# COMMAND ----------

# MAGIC %md
# MAGIC #CLAIMS

# COMMAND ----------

# MAGIC %md
# MAGIC ###Number of Claims by Treatment Type

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT C.treatment, COUNT(*) AS total_claims_new
# MAGIC FROM Claims_clean C
# MAGIC GROUP BY C.treatment;

# COMMAND ----------

# MAGIC %md
# MAGIC ###Number of Claims by selecting specific Treatment Type

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT C.treatment, COUNT(*) AS total_claims_new
# MAGIC FROM Claims_clean C
# MAGIC WHERE c.treatment = '${selected_treatment}' 
# MAGIC GROUP BY C.treatment;

# COMMAND ----------

# MAGIC %md
# MAGIC ###Overall Average Claim amount

# COMMAND ----------

average_claim_amount = claims_df.agg(avg("amount_claimed").alias("average_claim_amount")).collect()[0]["average_claim_amount"]

# Show the result
print(f"Average Claim Amount: Rs.{average_claim_amount:.2f}")

# COMMAND ----------

# MAGIC %md
# MAGIC #POLICIES

# COMMAND ----------

# MAGIC %md
# MAGIC ####Percentage of people who have paid the full amount for their policy

# COMMAND ----------

joined_df = payments_df.join(policies_df, "policy_number", "inner")

# Calculate the total amount paid for each policy
total_paid_amount = joined_df.groupBy("policy_number").agg(sum("paid_amount").alias("total_paid_amount"))

# Calculate the total amount due for each policy
total_due_amount = joined_df.groupBy("policy_number").agg(sum("daily_premium").alias("total_due_amount"))

# Calculate whether each policy is fully paid or not
fully_paid_df = total_paid_amount.join(total_due_amount, "policy_number", "inner") \
    .withColumn("fully_paid", when(col("total_paid_amount") >= col("total_due_amount"), 1).otherwise(0))

# Calculate the percentage of people who have paid the full amount
fully_paid_percentage = (fully_paid_df.filter(col("fully_paid") == 1).count() / fully_paid_df.count()) * 100

# Show the result
print(f"Percentage of people who have paid the full amount for their policy: {fully_paid_percentage:.2f}%")

# COMMAND ----------

display(policies_df)

# COMMAND ----------

# MAGIC %md
# MAGIC ###Rejected Claims by Rejection Reason

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE WIDGET DROPDOWN rejection_reason_widget DEFAULT "Pre-Existing Conditions" CHOICES SELECT DISTINCT reason FROM Rejected_claims_clean;
# MAGIC
# MAGIC SELECT reason, COUNT(*) AS num_rejected_claims
# MAGIC FROM Rejected_claims_clean
# MAGIC WHERE reason = "$rejection_reason_widget"
# MAGIC GROUP BY reason;
# MAGIC

# COMMAND ----------


